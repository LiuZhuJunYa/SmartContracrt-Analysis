package main

import (
	"fmt"
	"github.com/tealeg/xlsx"
	"log"
	"sort"
	"strconv"
	"strings"
)

// 完整的EVM Opcode映射
var opcodes = map[string]string{
	"00": "STOP",
	"01": "ADD",
	"02": "MUL",
	"03": "SUB",
	"04": "DIV",
	"05": "SDIV",
	"06": "MOD",
	"07": "SMOD",
	"08": "ADDMOD",
	"09": "MULMOD",
	"0a": "EXP",
	"0b": "SIGNEXTEND",
	"0c": "Invalid",
	"0d": "Invalid",
	"0e": "Invalid",
	"0f": "Invalid",
	"10": "LT",
	"11": "GT",
	"12": "SLT",
	"13": "SGT",
	"14": "EQ",
	"15": "ISZERO",
	"16": "AND",
	"17": "OR",
	"18": "XOR",
	"19": "NOT",
	"1a": "BYTE",
	"1b": "SHL",
	"1c": "SHR",
	"1d": "SAR",
	"1e": "Invalid",
	"1f": "Invalid",
	"20": "SHA3",
	"21": "Invalid",
	"22": "Invalid",
	"23": "Invalid",
	"24": "Invalid",
	"25": "Invalid",
	"26": "Invalid",
	"27": "Invalid",
	"28": "Invalid",
	"29": "Invalid",
	"2a": "Invalid",
	"2b": "Invalid",
	"2c": "Invalid",
	"2d": "Invalid",
	"2e": "Invalid",
	"2f": "Invalid",
	"30": "ADDRESS",
	"31": "BALANCE",
	"32": "ORIGIN",
	"33": "CALLER",
	"34": "CALLVALUE",
	"35": "CALLDATALOAD",
	"36": "CALLDATASIZE",
	"37": "CALLDATACOPY",
	"38": "CODESIZE",
	"39": "CODECOPY",
	"3a": "GASPRICE",
	"3b": "EXTCODESIZE",
	"3c": "EXTCODECOPY",
	"3d": "RETURNDATASIZE",
	"3e": "RETURNDATACOPY",
	"3f": "EXTCODEHASH",
	"40": "BLOCKHASH",
	"41": "COINBASE",
	"42": "TIMESTAMP",
	"43": "NUMBER",
	"44": "DIFFICULTY",
	"45": "GASLIMIT",
	"46": "CHAINID",
	"47": "SELFBALANCE",
	"48": "BASEFEE",
	"49": "Invalid",
	"4a": "Invalid",
	"4b": "Invalid",
	"4c": "Invalid",
	"4d": "Invalid",
	"4e": "Invalid",
	"4f": "Invalid",
	"50": "POP",
	"51": "MLOAD",
	"52": "MSTORE",
	"53": "MSTORE8",
	"54": "SLOAD",
	"55": "SSTORE",
	"56": "JUMP",
	"57": "JUMPI",
	"58": "PC",
	"59": "MSIZE",
	"5a": "GAS",
	"5b": "JUMPDEST",
	"5c": "Invalid",
	"5d": "Invalid",
	"5e": "Invalid",
	"5f": "Invalid",
	"60": "PUSH1",
	"61": "PUSH2",
	"62": "PUSH3",
	"63": "PUSH4",
	"64": "PUSH5",
	"65": "PUSH6",
	"66": "PUSH7",
	"67": "PUSH8",
	"68": "PUSH9",
	"69": "PUSH10",
	"6a": "PUSH11",
	"6b": "PUSH12",
	"6c": "PUSH13",
	"6d": "PUSH14",
	"6e": "PUSH15",
	"6f": "PUSH16",
	"70": "PUSH17",
	"71": "PUSH18",
	"72": "PUSH19",
	"73": "PUSH20",
	"74": "PUSH21",
	"75": "PUSH22",
	"76": "PUSH23",
	"77": "PUSH24",
	"78": "PUSH25",
	"79": "PUSH26",
	"7a": "PUSH27",
	"7b": "PUSH28",
	"7c": "PUSH29",
	"7d": "PUSH30",
	"7e": "PUSH31",
	"7f": "PUSH32",
	"80": "DUP1",
	"81": "DUP2",
	"82": "DUP3",
	"83": "DUP4",
	"84": "DUP5",
	"85": "DUP6",
	"86": "DUP7",
	"87": "DUP8",
	"88": "DUP9",
	"89": "DUP10",
	"8a": "DUP11",
	"8b": "DUP12",
	"8c": "DUP13",
	"8d": "DUP14",
	"8e": "DUP15",
	"8f": "DUP16",
	"90": "SWAP1",
	"91": "SWAP2",
	"92": "SWAP3",
	"93": "SWAP4",
	"94": "SWAP5",
	"95": "SWAP6",
	"96": "SWAP7",
	"97": "SWAP8",
	"98": "SWAP9",
	"99": "SWAP10",
	"9a": "SWAP11",
	"9b": "SWAP12",
	"9c": "SWAP13",
	"9d": "SWAP14",
	"9e": "SWAP15",
	"9f": "SWAP16",
	"a0": "LOG0",
	"a1": "LOG1",
	"a2": "LOG2",
	"a3": "LOG3",
	"a4": "LOG4",
	"a5": "Invalid",
	"a6": "Invalid",
	"a7": "Invalid",
	"a8": "Invalid",
	"a9": "Invalid",
	"aa": "Invalid",
	"ab": "Invalid",
	"ac": "Invalid",
	"ad": "Invalid",
	"ae": "Invalid",
	"af": "Invalid",
	"b0": "PUSH",
	"b1": "DUP",
	"b2": "SWAP",
	"b3": "Invalid",
	"b4": "Invalid",
	"b5": "Invalid",
	"b6": "Invalid",
	"b7": "Invalid",
	"b8": "Invalid",
	"b9": "Invalid",
	"ba": "Invalid",
	"bb": "Invalid",
	"bc": "Invalid",
	"bd": "Invalid",
	"be": "Invalid",
	"bf": "Invalid",
	"c0": "Invalid",
	"c1": "Invalid",
	"c2": "Invalid",
	"c3": "Invalid",
	"c4": "Invalid",
	"c5": "Invalid",
	"c6": "Invalid",
	"c7": "Invalid",
	"c8": "Invalid",
	"c9": "Invalid",
	"ca": "Invalid",
	"cb": "Invalid",
	"cc": "Invalid",
	"cd": "Invalid",
	"ce": "Invalid",
	"cf": "Invalid",
	"d0": "Invalid",
	"d1": "Invalid",
	"d2": "Invalid",
	"d3": "Invalid",
	"d4": "Invalid",
	"d5": "Invalid",
	"d6": "Invalid",
	"d7": "Invalid",
	"d8": "Invalid",
	"d9": "Invalid",
	"da": "Invalid",
	"db": "Invalid",
	"dc": "Invalid",
	"dd": "Invalid",
	"de": "Invalid",
	"df": "Invalid",
	"e0": "Invalid",
	"e1": "Invalid",
	"e2": "Invalid",
	"e3": "Invalid",
	"e4": "Invalid",
	"e5": "Invalid",
	"e6": "Invalid",
	"e7": "Invalid",
	"e8": "Invalid",
	"e9": "Invalid",
	"ea": "Invalid",
	"eb": "Invalid",
	"ec": "Invalid",
	"ed": "Invalid",
	"ee": "Invalid",
	"ef": "Invalid",
	"f0": "CREATE",
	"f1": "CALL",
	"f2": "CALLCODE",
	"f3": "RETURN",
	"f4": "DELEGATECALL",
	"f5": "CREATE2",
	"f6": "Invalid",
	"f7": "Invalid",
	"f8": "Invalid",
	"f9": "Invalid",
	"fa": "STATICCALL",
	"fb": "Invalid",
	"fc": "Invalid",
	"fd": "REVERT",
	"fe": "Invalid",
	"ff": "SELFDESTRUCT",
}

var URL = "-"

func GetOpcodesFromEXCEL() {
	// 更改为你的文件路径
	excelFileName := URL
	xlFile, err := xlsx.OpenFile(excelFileName)
	if err != nil {
		log.Fatalf("Failed to open file: %v", err)
	}

	opcodes := make(map[string]string)

	// 假设 opcode 数据在第一个 sheet 上
	sheet := xlFile.Sheets[0]
	for _, row := range sheet.Rows {
		// 检查 row 是否有至少两个 cell
		if len(row.Cells) >= 2 {
			key := strings.ToLower(row.Cells[0].String()) // 将键转换为小写
			value := row.Cells[1].String()
			opcodes[key] = value
		}
	}

	// 提取 map 的所有键并转换为整数以便排序
	keys := make([]string, 0, len(opcodes))
	for k := range opcodes {
		keys = append(keys, k)
	}

	// 将十六进制的字符串键转换为整数进行排序
	sort.Slice(keys, func(i, j int) bool {
		ki, _ := strconv.ParseInt(keys[i], 16, 64)
		kj, _ := strconv.ParseInt(keys[j], 16, 64)
		return ki < kj
	})

	// 按照排序后的键来遍历和打印 map 的值
	for _, k := range keys {
		fmt.Printf("\"%s\": \"%s\",\n", k, opcodes[k])
	}
}
